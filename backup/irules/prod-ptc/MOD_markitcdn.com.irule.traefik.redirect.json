{
  "kind": "tm:ltm:rule:rulestate",
  "name": "MOD_markitcdn.com.irule.traefik.redirect",
  "partition": "www-qa",
  "fullPath": "/www-qa/MOD_markitcdn.com.irule.traefik.redirect",
  "generation": 1,
  "selfLink": "https://localhost/mgmt/tm/ltm/rule/~www-qa~MOD_markitcdn.com.irule.traefik.redirect?ver=16.1.4.1",
  "apiAnonymous": "when HTTP_REQUEST {\n    set sharedpool \"qa.services.mdgapp.net_80.pool\"\n    pool $sharedpool\n\n    # Extract the string between the first and second slash which represents\n    # the actual origin to use for this request. Use a skip count of 1 to strip\n    # the first slash.\n    set firstFolder [findstr [string tolower [HTTP::path]] \"/\" 1 \"/\"]\n    set newpool \"${firstFolder}_80.pool\"\n\n    # Insert headers to acknowledge we came through this iRule and what\n    # real origin is being requested.\n    HTTP::header insert \"F5-CDN-REDIRECT\" $firstFolder\n    HTTP::header remove \"F5-VIRTUAL-SERVER\"\n    HTTP::header insert \"F5-VIRTUAL-SERVER\" $firstFolder\n\n    # Ensure that we update the HOST header to include the requested origin and\n    # not the origin-content domain.\n    HTTP::header remove \"HOST\"\n    HTTP::header insert \"HOST\" $firstFolder\n\n    # Remove the first folder from the uri. Using \"string map\" because it\n    # retains the case of the URI (important for Linux/Apache, and also to\n    # retain the case of any query strings)\n    HTTP::path [string map [list \"/$firstFolder/\" \"/\"] [HTTP::path]]\n\n    if { [catch {\n        # catch is used incase $newpool does not exist\n        if { [active_members $newpool] == 0 } then {\n            # The pool does exist but has no available members so use\n            # $sharedpool\n            pool $sharedpool\n        } else {\n            # The $newpool does exist and has available members so use $newpool\n            pool $newpool\n        }\n    }] } then {\n        # if $newpool does not exist use $sharedpool\n        pool $sharedpool\n    }\n}"
}